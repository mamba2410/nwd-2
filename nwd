#!/bin/sh

# Define a function to spit out usage information
usage(){
	echo "
	Usage:
		nwd <project-name> [options]
	Options:
	-l <language>, --language <language>
		Specifies the language to use for the project.
		Defaults to c.

	-g, --git
		Initialises a git repo for the project and adds a gitignore.
		Also creates an initial commit.

	-r <path/to/remote>, --remote <path/to/remote>
		Specifies a path to the remote git repository to set as origin.
		No default.

	-i, --init
		Create initialisation source files for the language.

	--license <license>
		Copy over a license file if specified.
		Licenses include GPL3, MIT, etc.
		No default.
	"
	exit
}

# Getting project name
project_name="$1"

# Checking if the name is valid
if ! echo $project_name | grep -Eq -- "^[A-z0-9_\.][-A-z0-9_\.]*$"; then
	# Quit if not valid
	usage
fi

# Get name out of arguments
shift

# Set up some flags
language="c"
init_files=0
init_git=0
remote_repo=""
license=""
other_args=""

# Loop through arguments to check for flags
# Note: The for loop below doesn't work for some reason.
# When shift is called it updates weirdly.
#for arg in "$@"; do
while [ $# -ge 1 ]
do
	case $1 in
		"-l"|"--language")
			language="$2";
			# Remove flag and flag value from $@
			shift 2;
			;;
		"-i"|"--init")
			# Remove flag from $@
			init_files=1;
			shift 1;
			;;
		"-g"|"--git")
			init_git=1;
			shift;
			;;
		"-r"|"--remote")
			remote_repo="$2";
			# Remove flag and flag value from $@
			shift 2;
			;;
		"--license")
			license="$2";
			# Remove flag and flag value from $@
			shift 2;
			;;
		*)
			# This is where unrecognised flags should go
			#other_args="$other_args $1";
			#shift 1;
			echo "Unrecognised argument \"$1\""
			usage
			;;
	esac
done

#echo "$language\n$init_files\n$remote_repo\n$license"
#echo "Unrecognised arguments: $other_args"


# Define a variable where the language and initial data should be kept
# First check for $XDG_DATA_HOME and if that fails then look in $HOME
data_dir="nwd"
if [ ! -z "$XDG_DATA_HOME" ]; then
	data_dir="$XDG_DATA_HOME/$data_dir"
else
	data_dir="$HOME/.$data_dir"
fi


# Check if language is a thing
# TODO This currently relies on bash, try to make this dash or shell independent
#data_dir=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
if !  echo "$(ls "$data_dir/languages/")" | grep -q -- "$language" ; then
	echo "Language not recognised"
	exit
fi


# Check if license is non-empty
if [ ! -z "$license" ]; then
	# If license is not empty, then check if its recognised
	if !  echo "$(ls "$data_dir/licenses/")" | grep -q -- "$license" ; then
		echo "License not recognised, skipping"
	fi
fi


# Check if directory doesn't already exist
if [ -d "$project_name" ]; then
	echo "Directory $project_name already exists! Aborting"
else
	# Create project directory
	mkdir -p $project_name
	# Generate directory tree
	cd $project_name
	mkdir -p $(cat "$data_dir/dirs.txt")

	# Copy over docs
	cp $data_dir/docs/README.md README.md
	[ -z "$license" ] || cp $data_dir/licenses/$license LICENSE.md
	cp $data_dir/docs/DESIGN.md docs/DESIGN.md
	cp $data_dir/docs/ISSUES.md docs/ISSUES.md
	cp $data_dir/docs/MANUAL.md docs/MANUAL.md
	cp $data_dir/docs/TODO.md docs/TODO.md

	# Personalise docs
	replace_token="PROJECT_NAME"
	sed -i "s/$replace_token/$project_name/g" README.md
	sed -i "s/$replace_token/$project_name/g" docs/DESIGN.md
	sed -i "s/$replace_token/$project_name/g" docs/ISSUES.md
	sed -i "s/$replace_token/$project_name/g" docs/MANUAL.md
	
	# Pass off to language specific script
	$data_dir/languages/$language/specifics.sh $data_dir $project_name $init_files
	# Come back from language script

	# Check if should initialise git
	if [ $init_git = 1 ]; then
		git init . && echo "Initialised git"
		touch .gitignore
		git add .
		git commit -m "Initial commit" && echo "Added initial commit"
	fi
	
	# Check if should add a remote repo
	if [ ! -z "$remote_repo" ]; then
		# Check if git has been initialised
		if [ $init_git = 0 ]; then
			echo "Cannot add remote repository if git has not been initialised!"
		else
			# If all is well, add as origin
			git remote add origin "$remote_repo" && echo "Added '$remote_repo' as origin"
		fi
	fi

fi
